//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : Automata.sm
//

#ifndef AUTOMATA_SM_H
#define AUTOMATA_SM_H


#define SMC_USES_IOSTREAMS

#include "statemap.h"

// Forward declarations.
class Map1;
class Map1_Start;
class Map1_Header;
class Map1_StateA;
class Map1_StateB;
class Map1_Server;
class Map1_Domain;
class Map1_Zone;
class Map1_Ending;
class Map1_OK;
class Map1_Error;
class Map1_Default;
class AppClassState;
class AutomataContext;
class AppClass;

class AppClassState :
    public statemap::State
{
public:

    AppClassState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(AutomataContext&) {};
    virtual void Exit(AutomataContext&) {};

    virtual void Colon(AutomataContext& context);
    virtual void Devider(AutomataContext& context);
    virtual void Dot(AutomataContext& context);
    virtual void EOS(AutomataContext& context);
    virtual void Letter(AutomataContext& context);
    virtual void Number(AutomataContext& context);
    virtual void Slash(AutomataContext& context);
    virtual void Unknown(AutomataContext& context);

protected:

    virtual void Default(AutomataContext& context);
};

class Map1
{
public:

    static Map1_Start Start;
    static Map1_Header Header;
    static Map1_StateA StateA;
    static Map1_StateB StateB;
    static Map1_Server Server;
    static Map1_Domain Domain;
    static Map1_Zone Zone;
    static Map1_Ending Ending;
    static Map1_OK OK;
    static Map1_Error Error;
};

class Map1_Default :
    public AppClassState
{
public:

    Map1_Default(const char * const name, const int stateId)
    : AppClassState(name, stateId)
    {};

    virtual void Devider(AutomataContext& context);
    virtual void EOS(AutomataContext& context);
    virtual void Dot(AutomataContext& context);
    virtual void Letter(AutomataContext& context);
    virtual void Number(AutomataContext& context);
    virtual void Slash(AutomataContext& context);
    virtual void Colon(AutomataContext& context);
    virtual void Unknown(AutomataContext& context);
};

class Map1_Start :
    public Map1_Default
{
public:
    Map1_Start(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Devider(AutomataContext& context);
    virtual void Letter(AutomataContext& context);
};

class Map1_Header :
    public Map1_Default
{
public:
    Map1_Header(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Colon(AutomataContext& context);
    virtual void Dot(AutomataContext& context);
    virtual void Letter(AutomataContext& context);
};

class Map1_StateA :
    public Map1_Default
{
public:
    Map1_StateA(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Slash(AutomataContext& context);
};

class Map1_StateB :
    public Map1_Default
{
public:
    Map1_StateB(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Slash(AutomataContext& context);
};

class Map1_Server :
    public Map1_Default
{
public:
    Map1_Server(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Dot(AutomataContext& context);
    virtual void Letter(AutomataContext& context);
    virtual void Number(AutomataContext& context);
};

class Map1_Domain :
    public Map1_Default
{
public:
    Map1_Domain(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Dot(AutomataContext& context);
    virtual void Letter(AutomataContext& context);
    virtual void Number(AutomataContext& context);
};

class Map1_Zone :
    public Map1_Default
{
public:
    Map1_Zone(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Devider(AutomataContext& context);
    virtual void EOS(AutomataContext& context);
    virtual void Letter(AutomataContext& context);
};

class Map1_Ending :
    public Map1_Default
{
public:
    Map1_Ending(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Devider(AutomataContext& context);
    virtual void EOS(AutomataContext& context);
};

class Map1_OK :
    public Map1_Default
{
public:
    Map1_OK(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

};

class Map1_Error :
    public Map1_Default
{
public:
    Map1_Error(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Colon(AutomataContext& context);
    virtual void Devider(AutomataContext& context);
    virtual void Dot(AutomataContext& context);
    virtual void EOS(AutomataContext& context);
    virtual void Letter(AutomataContext& context);
    virtual void Number(AutomataContext& context);
    virtual void Slash(AutomataContext& context);
    virtual void Unknown(AutomataContext& context);
};

class AutomataContext :
    public statemap::FSMContext
{
public:

    explicit AutomataContext(AppClass& owner)
    : FSMContext(Map1::Start),
      _owner(owner)
    {};

    AutomataContext(AppClass& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline AppClass& getOwner()
    {
        return (_owner);
    };

    inline AppClassState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<AppClassState&>(*_state);
    };

    inline void Colon()
    {
        getState().Colon(*this);
    };

    inline void Devider()
    {
        getState().Devider(*this);
    };

    inline void Dot()
    {
        getState().Dot(*this);
    };

    inline void EOS()
    {
        getState().EOS(*this);
    };

    inline void Letter()
    {
        getState().Letter(*this);
    };

    inline void Number()
    {
        getState().Number(*this);
    };

    inline void Slash()
    {
        getState().Slash(*this);
    };

    inline void Unknown()
    {
        getState().Unknown(*this);
    };

private:
    AppClass& _owner;
};


#endif // AUTOMATA_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
